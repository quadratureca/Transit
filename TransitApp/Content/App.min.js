let markerEntity, position, markerEntities = [], timeoutHandle = null; function initialise() { navigator.geolocation ? navigator.geolocation.getCurrentPosition(getPosition, errorPosition) : (position = [43.55954, -79.72672], createMap()) } function getPosition(e) { position = [e.coords.latitude, e.coords.longitude], createMap() } function errorPosition() { position = [43.55954, -79.72672], createMap() } function createMap() { map = L.map("map", { attributionControl: !1, zoomControl: !0 }).setView(position, 14), L.tileLayer("https://{s}.tile.osm.org/{z}/{x}/{y}.png", {}).addTo(map), map.addEventListener("moveend", function (e) { null != timeoutHandle && clearTimeout(timeoutHandle), timeoutHandle = setTimeout(getUpdateData, 100) }), markerEntities.length = 0, timeoutHandle = setTimeout(getUpdateData, 100) } function createBus(e, t) { var i, n; (i = document.createElement("canvas")).width = 48, i.height = 48, (n = i.getContext("2d")).clearRect(0, 0, i.width, i.height), n.beginPath(), n.arc(24, 24, 16, 0, 2 * Math.PI, 0), n.fillStyle = "blue", n.fill(), n.font = "bold 12px Arial"; let o = n.measureText(e), a = (48 - o.width) / 2, r = (48 + (o.actualBoundingBoxAscent + o.actualBoundingBoxDescent)) / 2; switch (n.fillStyle = "white", n.fillText(e, a, r), n.fillStyle = "blue", n.beginPath(), t) { case 0: n.moveTo(24, 0), n.lineTo(36, 9), n.lineTo(24, 4), n.lineTo(12, 9); break; case 45: n.moveTo(41, 7), n.lineTo(43, 22), n.lineTo(38, 10), n.lineTo(26, 5); break; case 90: n.moveTo(47, 23), n.lineTo(39, 36), n.lineTo(43, 24), n.lineTo(39, 12); break; case 135: n.moveTo(41, 41), n.lineTo(26, 43), n.lineTo(38, 38), n.lineTo(43, 26); break; case 180: n.moveTo(24, 47), n.lineTo(12, 39), n.lineTo(24, 43), n.lineTo(36, 39); break; case 225: n.moveTo(7, 41), n.lineTo(5, 26), n.lineTo(10, 38), n.lineTo(22, 43); break; case 270: n.moveTo(0, 24), n.lineTo(9, 12), n.lineTo(4, 24), n.lineTo(9, 36); break; case 315: n.moveTo(7, 7), n.lineTo(22, 5), n.lineTo(10, 10), n.lineTo(5, 22) }return n.closePath(), n.fill(), i.toDataURL() } async function getTransitData(e, t, i, n) { let o = { South: e, West: t, North: i, East: n }; var a = "https://transit.tripsystem.net/entities?bounds=" + JSON.stringify(o); const r = await fetch(a); return await r.json() } function getUpdateData() { timeoutHandle = null; let e = map.getBounds(); getTransitData(e._southWest.lat, e._southWest.lng, e._northEast.lat, e._northEast.lng).then(e => { update(e) }) } function update(e) { let t, i = []; e.forEach(function (e, t) { i.push(e) }), e.forEach(function (e, i) { if (-1 == (t = 0 == markerEntities.length ? -1 : markerEntities.findIndex(t => t.Entity.vehicleId == e.vehicleId))) { let t = L.marker([e.latitude, e.longitude], { icon: L.icon({ iconUrl: createBus(e.routeId, e.bearing), iconSize: [48, 48], iconAnchor: [24, 24] }), entity: JSON.stringify(e) }).addTo(map); markerEntity = { marker: t, Entity: e }, markerEntities.push(markerEntity) } else { let i = markerEntities[t]; if (i.Entity.bearing == e.bearing && i.Entity.longitude == e.longitude && i.Entity.latitude == e.latitude) markerEntities[t].Entity = e; else if (i.Entity.bearing !== e.bearing) { map.removeLayer(i.marker); let n = L.marker([e.latitude, e.longitude], { icon: L.icon({ iconUrl: createBus(e.routeId, e.bearing), iconSize: [48, 48], iconAnchor: [24, 24] }), entity: JSON.stringify(e) }).addTo(map); markerEntities[t] = { marker: n, Entity: e } } else i.Entity.latitude === e.latitude && i.Entity.longitude === e.longitude || (i.marker.setLatLng([e.latitude, e.longitude]), markerEntities[t].Entity = e) } }); for (var n = markerEntities.length - 1; n >= 0; n--) { -1 == i.findIndex(e => e.vehicleId == markerEntities[n].Entity.vehicleId) && (map.removeLayer(markerEntities[n].marker), markerEntities.splice(n, 1)) } timeoutHandle = setTimeout(getUpdateData, 15e3) }