// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using TransitAPI.Models;

namespace TransitAPI.Models
{
    public partial class TransitContext
    {
        private ITransitContextProcedures _procedures;

        public virtual ITransitContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new TransitContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public ITransitContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Entity>().HasNoKey().ToView(null);
        }
    }

    public partial class TransitContextProcedures : ITransitContextProcedures
    {
        private readonly TransitContext _context;

        public TransitContextProcedures(TransitContext context)
        {
            _context = context;
        }

        public virtual async Task<List<Entity>> GetRelevantEntitiesAsync(double? North, double? East, double? South, double? West, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "North",
                    Value = North ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "East",
                    Value = East ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "South",
                    Value = South ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                new SqlParameter
                {
                    ParameterName = "West",
                    Value = West ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Float,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<Entity>("EXEC @returnValue = [dbo].[GetRelevantEntities] @North, @East, @South, @West", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
